#lang racket

(define/contract (construct-product-matrix grid)
  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))
  (define (make-vec2d m n [v 0]) (build-vector m (Î» (_) (make-vector n v))))
  (define (vec2d-ref vec m n) (vector-ref (vector-ref vec m) n))
  (define (vec2d-set! vec m n v) (vector-set! (vector-ref vec m) n v))
  (define grid-vec (list->vector (map list->vector grid)))
  (define m (length grid))
  (define n (length (car grid)))
  (define e (* m n))
  (define a (make-vec2d m n))
  (define suf (make-vec2d m n))
  (for/fold ([acc 1])
            ([k (in-range (sub1 e) 0 -1)])
    (define-values (i j) (quotient/remainder k n))
    (define n-acc (remainder (* acc (vec2d-ref grid-vec i j)) 12345))
    (vec2d-set! suf i j n-acc)
    n-acc)
  (define last-one
    (for/fold ([acc 1])
              ([k (in-range (sub1 e))])
      (define-values (i j) (quotient/remainder k n))
      (define-values (i1 j1) (quotient/remainder (add1 k) n))
      (define t (remainder (* acc (vec2d-ref suf i1 j1)) 12345))
      (vec2d-set! a i j t)
      (remainder (* acc (vec2d-ref grid-vec i j)) 12345)))
  (vec2d-set! a (sub1 m) (sub1 n) last-one)
  (vector-map! vector->list a)
  (vector->list a))

(construct-product-matrix '((1 2) (3 4)))
