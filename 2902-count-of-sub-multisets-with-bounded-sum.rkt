#lang racket

(define/contract (count-sub-multisets nums l r)
  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)
  (define occ (make-hasheq))
  (for ([n (in-list nums)])
    (hash-update! occ n add1 0))
  (define a (make-vector (add1 r)))
  (vector-set! a 0 1)
  (for ([(n c) (in-hash occ)])
    (define t (make-vector (add1 r)))
    (define b (* n (add1 c)))
    (for ([i (in-inclusive-range n (min (sub1 b) r))])
      (vector-set! t i (+ (vector-ref t (- i n))
                          (vector-ref a (- i n)))))
    (for ([i (in-inclusive-range b r)])
      (vector-set! t i (+ (vector-ref a (- i n))
                          (vector-ref t (- i n))
                          (- (vector-ref a (- i b))))))
    (when (zero? n)
      (vector-map! (Î» (x y) (if (zero? y) 0 c)) t a))
    (vector-map! + a t))
  (for/fold ([s 0])
            ([i (in-inclusive-range l r)])
    (remainder (+ s (vector-ref a i)) 1000000007)))

(count-sub-multisets '(1 2 2 3) 6 6)
(count-sub-multisets '(2 1 4 2 7) 1 5)
(count-sub-multisets '(0 0 1 2 3) 2 3)
